package websocket

import (
	"encoding/json"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/gorilla/websocket"

	"github.com/alexxxzhuk/babylon/middleware" // –∏–ª–∏ –ø—É—Ç—å –∫ VerifyAccessToken
)

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

type IncomingMessage struct {
	Type    string `json:"type"`
	Content string `json:"content"`
}

type OutgoingMessage struct {
	Type string `json:"type"`
	Body string `json:"body"`
}

func WebSocketHandler(c *gin.Context) {
	// ‚úÖ 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
	token := c.Query("token")
	if token == "" {
		log.Println("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞")
		c.Writer.WriteHeader(http.StatusUnauthorized)
		return
	}

	// ‚úÖ 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
	userID, err := middleware.VerifyAccessToken(token)
	if err != nil {
		log.Println("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω:", err)
		c.Writer.WriteHeader(http.StatusUnauthorized)
		return
	}

	// ‚úÖ 3. –ê–ø–≥—Ä–µ–π–¥–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	conn, err := upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞:", err)
		return
	}
	defer conn.Close()

	go func() {
		for {
			time.Sleep(30 * time.Second)
			if err := conn.WriteMessage(websocket.PingMessage, []byte{}); err != nil {
				log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Ping:", err)
				return
			}
		}
	}()

	log.Printf("‚úÖ User %d –ø–æ–¥–∫–ª—é—á—ë–Ω –ø–æ WebSocket", userID)

	Manager.Add(userID, conn)
	defer Manager.Remove(userID)

	for {
		_, msgBytes, err := conn.ReadMessage()
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", err)
			break
		}

		var msg IncomingMessage
		if err := json.Unmarshal(msgBytes, &msg); err != nil {
			log.Println("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON:", err)
			sendError(conn, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
			continue
		}

		log.Printf("üì© –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", userID, msg.Content)

		// üëá –í–°–¢–ê–í–¨ –°–Æ–î–ê ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		if msg.Type == "send_to_user" {
			parts := strings.SplitN(msg.Content, ":", 2)
			if len(parts) != 2 {
				sendError(conn, "–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å userId:message")
				continue
			}

			targetID, _ := strconv.Atoi(parts[0])
			targetMsg := parts[1]

			if targetConn, ok := Manager.Get(targetID); ok {
				out := OutgoingMessage{
					Type: "message",
					Body: targetMsg,
				}
				outBytes, _ := json.Marshal(out)
				targetConn.WriteMessage(websocket.TextMessage, outBytes)
				log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", targetID, targetMsg)
			} else {
				sendError(conn, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏")
			}
			continue
		}

		// üì® –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ send_to_user
		resp := OutgoingMessage{
			Type: "ack",
			Body: "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ",
		}
		respBytes, _ := json.Marshal(resp)

		log.Println("üîÅ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É...")
		if err := conn.WriteMessage(websocket.TextMessage, respBytes); err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", err)
		} else {
			log.Println("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
		}
	}
}

func sendError(conn *websocket.Conn, message string) {
	resp := OutgoingMessage{
		Type: "error",
		Body: message,
	}
	if respBytes, err := json.Marshal(resp); err == nil {
		conn.WriteMessage(websocket.TextMessage, respBytes)
	}
}
